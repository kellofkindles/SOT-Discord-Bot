"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
const HTTPStatusCodes = require("./http-status-codes");
const errors = require("./errors");
const path_1 = require("path");
const USER_AGENT = [
    'Mozilla/5.0 (XboxReplay; XboxLiveAPI/1.0)',
    'AppleWebKit/537.36 (KHTML, like Gecko)',
    'Chrome/71.0.3578.98 Safari/537.36'
].join(' ');
const BASE_HEADERS = {
    Accept: 'application/json; charset=utf-8',
    'Accept-Language': 'en-US',
    'User-Agent': USER_AGENT
};
const XBOX_LIVE_DOMAINS = {
    screenshots: 'https://screenshotsmetadata.xboxlive.com/',
    gameclips: 'https://gameclipsmetadata.xboxlive.com/',
    profile: 'https://profile.xboxlive.com/'
};
const _isCallStatusCodeValid = (statusCode) => [
    HTTPStatusCodes.OK,
    HTTPStatusCodes.ACCEPTED,
    HTTPStatusCodes.NO_CONTENT,
    HTTPStatusCodes.CREATED
].indexOf(statusCode) !== -1;
const _isXUID = (entry) => {
    const n = Number(entry);
    return !isNaN(n) && String(n).length > 15;
};
exports.call = (uri, authorization, options = {}) => {
    const { userHash, XSTSToken } = authorization;
    const method = options.method || 'GET';
    const headers = options.headers || {};
    const qs = options.qs ? options.qs : void 0;
    const payload = options.payload || void 0;
    return new Promise((resolve, reject) => {
        request({
            uri,
            qs,
            json: payload === void 0 ? true : payload,
            followRedirect: true,
            gzip: true,
            headers: Object.assign({}, BASE_HEADERS, { 'x-xbl-contract-version': 2, Authorization: `XBL3.0 x=${userHash};${XSTSToken}` }, headers),
            method
        }, (err, response, body) => {
            if (err)
                return reject(errors.internal(err.message));
            const statusCode = response.statusCode;
            if (statusCode === HTTPStatusCodes.FORBIDDEN) {
                return reject(errors.forbidden());
            }
            else if (statusCode === HTTPStatusCodes.UNAUTHORIZED) {
                return reject(errors.unauthorized());
            }
            if (_isCallStatusCodeValid(response.statusCode) === false)
                return reject(errors.requestError(`Got a request error for "${uri}"`, response.statusCode));
            else
                resolve(body);
        });
    });
};
exports.getPlayerXUID = (gamertag, authorization) => __awaiter(this, void 0, void 0, function* () {
    if (_isXUID(gamertag)) {
        return gamertag;
    }
    const response = yield exports.call(XBOX_LIVE_DOMAINS.profile +
        path_1.join('users', `gt(${encodeURIComponent(gamertag)})`, 'settings'), authorization);
    if (response.profileUsers[0] === void 0) {
        throw errors.internal();
    }
    else
        return response.profileUsers[0].id;
});
exports.getPlayerSettings = (gamertag, authorization, settings = []) => __awaiter(this, void 0, void 0, function* () {
    const response = yield exports.call(XBOX_LIVE_DOMAINS.profile +
        path_1.join('users', `gt(${encodeURIComponent(gamertag)})`, 'settings'), authorization, { qs: { settings: settings.join(',') } });
    if (response.profileUsers[0] === void 0) {
        throw errors.internal();
    }
    return response.profileUsers[0].settings;
});
exports.getPlayerScreenshots = (gamertag, authorization, qs = {}) => __awaiter(this, void 0, void 0, function* () {
    const playerXUID = yield exports.getPlayerXUID(gamertag, authorization);
    if (typeof qs === 'number') {
        qs = { maxItems: qs };
    }
    return exports.call(XBOX_LIVE_DOMAINS.screenshots +
        path_1.join('users', `xuid(${playerXUID})`, 'screenshots'), authorization, {
        qs: {
            maxItems: qs.maxItems || 25,
            continuationToken: qs.continuationToken
        }
    });
});
exports.getPlayerGameclips = (gamertag, authorization, qs = {}) => __awaiter(this, void 0, void 0, function* () {
    const playerXUID = yield exports.getPlayerXUID(gamertag, authorization);
    if (typeof qs === 'number') {
        qs = { maxItems: qs };
    }
    return exports.call(XBOX_LIVE_DOMAINS.gameclips +
        path_1.join('users', `xuid(${playerXUID})`, 'clips'), authorization, {
        qs: {
            maxItems: qs.maxItems || 25,
            continuationToken: qs.continuationToken
        }
    });
});
